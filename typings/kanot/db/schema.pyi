"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional
from pydantic import BaseModel
from sqlalchemy import Engine

Base = ...
class Project(Base):
    __tablename__ = ...
    project_id: Any = ...
    project_title: Any = ...
    project_description: Any = ...
    code_types = ...
    codes = ...
    series = ...
    segments = ...
    elements = ...
    annotations = ...
    def __repr__(self): # -> str:
        ...
    


class CodeType(Base):
    __tablename__ = ...
    type_id: Any = ...
    type_name: Any = ...
    project_id: Any = ...
    project = ...
    codes = ...
    __table_args__ = ...
    def __repr__(self): # -> str:
        ...
    


class Code(Base):
    __tablename__ = ...
    code_id: Any = ...
    term: Any = ...
    description: Any = ...
    type_id: Any = ...
    reference: Any = ...
    coordinates: Any = ...
    code_type = ...
    project_id: Any = ...
    project = ...
    __table_args__ = ...
    def __repr__(self): # -> str:
        ...
    


class Series(Base):
    __tablename__ = ...
    series_id: Any = ...
    series_title: Any = ...
    project_id: Any = ...
    project = ...
    segments = ...


class Segment(Base):
    __tablename__ = ...
    segment_id: Any = ...
    segment_title: Any = ...
    series_id: Any = ...
    series = ...
    elements = ...
    project_id: Any = ...
    project = ...
    __table_args__ = ...


class SegmentCreate(BaseModel):
    segment_title: Optional[str]
    series_id: int
    project_id: int
    ...


class Element(Base):
    __tablename__ = ...
    element_id: Any = ...
    element_text: Any = ...
    segment_id: Any = ...
    segment = ...
    annotations = ...
    project_id: Any = ...
    project = ...
    def __repr__(self): # -> str:
        ...
    


class Annotation(Base):
    __tablename__ = ...
    annotation_id: Any = ...
    element_id: Any = ...
    code_id: Any = ...
    element = ...
    code = ...
    project_id: Any = ...
    project = ...
    __table_args__ = ...
    def __repr__(self): # -> str:
        ...
    


def create_database(engine: Engine): # -> None:
    ...

def drop_database(engine: Engine): # -> None:
    ...

