"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Any, List, Optional
from .schema import Annotation, Code, CodeType, Element, Project, Segment, Series

log_config = ...
logger = ...
class DatabaseManager:
    def __init__(self, engine: Any) -> None:
        ...
    
    @contextmanager
    def get_session(self): # -> Generator[Session, Any, None]:
        ...
    
    def create_database(self, engine: Any) -> None:
        ...
    
    def drop_database(self, engine: Any) -> None:
        ...
    
    def create_project(self, project_title: str, project_description: Optional[str] = ...) -> Project | None:
        ...
    
    def read_project(self, project_id: int) -> Optional[Project]:
        ...
    
    def read_all_projects(self) -> List[Project]:
        ...
    
    def update_project(self, project_id: int, project_title: Optional[str] = ..., project_description: Optional[str] = ...) -> None:
        ...
    
    def delete_project(self, project_id: int) -> None:
        ...
    
    def create_code_type(self, type_name: str, project_id: int) -> CodeType | None:
        ...
    
    def read_code_type(self, type_id: int) -> Optional[CodeType]:
        ...
    
    def read_all_code_types(self) -> Optional[list[CodeType]]:
        ...
    
    def update_code_type(self, type_id: int, type_name: str) -> None:
        ...
    
    def delete_code_type(self, type_id: int) -> None:
        ...
    
    def create_code(self, term: str, description: str, type_id: int, reference: str, coordinates: str, project_id: int) -> Code | None:
        ...
    
    def read_code(self, code_id: int) -> Optional[Code]:
        ...
    
    def read_all_codes(self) -> Optional[list[Code]]:
        ...
    
    def update_code(self, code_id: int, term: Optional[str] = ..., description: Optional[str] = ..., type_id: Optional[int] = ..., reference: Optional[str] = ..., coordinates: Optional[str] = ...) -> None:
        ...
    
    def delete_code(self, code_id: int) -> None:
        ...
    
    def create_series(self, series_title: str, project_id: int) -> Series | None:
        ...
    
    def read_series(self, series_id: int) -> Optional[Series]:
        ...
    
    def read_all_series(self) -> Optional[list[Series]]:
        ...
    
    def update_series(self, series_id: int, series_title: Optional[str]) -> None:
        ...
    
    def delete_series(self, series_id: int) -> None:
        ...
    
    def create_segment(self, segment_title: str, series_id: int, project_id: int) -> Segment | None:
        ...
    
    def read_segment(self, segment_id: int) -> Optional[Segment]:
        ...
    
    def read_segment_by_title(self, segment_title: str, series_id: int) -> Optional[Segment]:
        ...
    
    def read_all_segments(self) -> Optional[list[Segment]]:
        ...
    
    def update_segment(self, segment_id: int, segment_title: Optional[str] = ...) -> None:
        ...
    
    def delete_segment(self, segment_id: int) -> None:
        ...
    
    def create_element(self, element_text: str, segment_id: int, project_id: int) -> Element | None:
        ...
    
    def read_element(self, element_id: int) -> Optional[Element]:
        ...
    
    def read_all_elements(self) -> Optional[list[Element]]:
        ...
    
    def read_elements_paginated(self, skip: int = ..., limit: int = ...) -> Optional[list[Element]]:
        ...
    
    def update_element(self, element_id: int, element_text: Optional[str] = ..., segment_id: Optional[int] = ...) -> None:
        ...
    
    def delete_element(self, element_id: int) -> None:
        ...
    
    def create_annotation(self, element_id: int, code_id: int, project_id: int) -> Annotation | None:
        ...
    
    def read_annotation(self, annotation_id: int) -> Optional[Annotation]:
        ...
    
    def read_all_annotations(self) -> Optional[list[Annotation]]:
        ...
    
    def update_annotation(self, annotation_id: int, element_id: Optional[int] = ..., code_id: Optional[int] = ...) -> None:
        ...
    
    def delete_annotation(self, annotation_id: int) -> None:
        ...
    
    def merge_codes(self, code_a_id: int, code_b_id: int) -> Code | None:
        ...
    
    def get_annotations_for_code(self, code_id: int) -> list[Annotation]:
        ...
    
    def get_codes_for_element(self, element_id: int) -> list[Code]:
        ...
    
    def get_annotations_for_element_and_code(self, element_id: int, code_id: int) -> list[Annotation]:
        ...
    
    def search_elements(self, search_term: str, series_ids: list[int] = ..., segment_ids: list[int] = ..., code_ids: list[int] = ..., skip: int = ..., limit: int = ...) -> Optional[list[Element]]:
        ...
    
    def count_elements(self, search_term: str, series_ids: list[int] = ..., segment_ids: list[int] = ..., code_ids: list[int] = ...) -> int:
        ...
    


